@model Winter_Classes_App.Models.JobOfferCreateView

@{
    ViewData["Title"] = "Create";
}

<div class="row page-box">
    <div class="col-sm-12">
        <h2>New Job Offer</h2>
        @using (Html.BeginForm("", "", FormMethod.Post, new { name = "formAdd", id = "formAdd" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                @Html.LabelFor(m => m.JobTitle)
                @Html.EditorFor(m => m.JobTitle, new { htmlAttributes = new { @class = "form-control required ", data_bind = "value: jobTitle" } })
                @Html.ValidationMessageFor(m => m.JobTitle, "", new { @class = "text-danger", @id = "jobTitleValidation" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Company)
                @Html.DropDownListFor(m => m.CompanyId,
         Model.Companies.Select(c => new SelectListItem { Text = c.Name, Value = c.Id.ToString() }),
         new { @class = "form-control", data_bind = "value: company" })
                @Html.ValidationMessageFor(m => m.CompanyId, "", new { @class = "text-danger", @id = "companyIdValidation" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Location)
                @Html.EditorFor(m => m.Location, new { htmlAttributes = new { @class = "form-control required", data_bind = "value: location" } })
                @Html.ValidationMessageFor(m => m.Location, "", new { @class = "text-danger", @id = "locationValidation" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.SalaryFrom, "Salary")
                <div class="input-group">
                    <span class="input-group-addon">PLN</span>
                    @Html.EditorFor(m => m.SalaryFrom, new { htmlAttributes = new { @class = "form-control", placeholder = "From", data_bind = "value: salaryFrom" } })
                    <span class="input-group-addon">.00</span>
                </div>
                @Html.ValidationMessageFor(m => m.SalaryFrom, "", new { @class = "text-danger", @id = "salaryFromValidation" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.SalaryTo, "Salary")
                <div class="input-group">
                    <span class="input-group-addon">PLN</span>
                    @Html.EditorFor(m => m.SalaryTo, new { htmlAttributes = new { @class = "form-control", placeholder = "To", data_bind = "value: salaryTo" } })
                    <span class="input-group-addon">.00</span>
                </div>
                @Html.ValidationMessageFor(m => m.SalaryTo, "", new { @class = "text-danger", @id = "salaryToValidation" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.ValidUntil)
                <div class="input-group">
                    @Html.EditorFor(m => m.ValidUntil, new { htmlAttributes = new { @class = "form-control required", type = "Date", data_bind = "value: validUntil" } })
                    <span class="input-group-addon">
                        <span class="glyphicon glyphicon-calendar"></span>
                    </span>
                </div>
                @Html.ValidationMessageFor(m => m.ValidUntil, "", new { @class = "text-danger", @id = "validUntilValidation" })
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.Description)
                @Html.TextAreaFor(m => m.Description, new { @class = "form-control required", placeholder = "Enter description", data_bind = "value: description" })
                @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger", @id = "decriptionValidation" })
            </div>
            <div class="form-group">
                <button id="submitButton" name="submitButton" type="submit" class="btn btn-primary">Create</button>
            </div>
        }
    </div>
    <div class="row page-box">
        <h2>Preview</h2>
        <div class="row page-box well well-sm">
            <h1><span data-bind='text: jobTitlePreview'></span></h1>
            <div class="col-sm-12">
                <div class="offer-description"> </div>
            </div>
            <div class="offer-details">
                <div>
                    <label>Company:</label>
                    <span data-bind='text: companyPreview'> </span>
                </div>
                <div>
                    <label>Location:</label>
                    <span data-bind='text: locationPreview'> </span>
                </div>
                <div>
                    <label>Salary from:</label>
                    <span data-bind='text: salaryFromPreview'> </span>.00 (PLN)
                </div>
                <div>
                    <label>Salary to:</label>
                    <span data-bind='text: salaryToPreview'> </span>.00 (PLN)
                </div>
                <div>
                    <label>Created:</label>
                    <span id="clock"></span>
                </div>
                <div>
                    <label>Valid:</label>
                    <span data-bind='text: validUntilPreview'> </span>
                </div>
            </div>
            <span data-bind='text: descriptionPreview'> </span>
        </div>

    </div>
</div>

@section Scripts{
    <script src="~/js/knockout.js"></script>
    <script src="~/js/my_knockout.js"></script>
    <script src="~/js/job_offer.js"></script>
    <script src="~/js/jquery.validate.min.js"></script>

    <script>

        /*Validation, which triggers ajax post whether everything is valid*/
        $(function () {
            $("form[name='formAdd']").validate({
                rules: {
                    JobTitle: "required",
                    Location: "required",
                    Description: {
                        required: true,
                        minlength: 100
                    },
                    ValidUntil: "required",
                    SalaryFrom: {
                        number: true,
                        minStrict: 0
                    },
                    SalaryTo: {
                        number: true,
                        minStrict: 0
                    }
                },
                messages: {
                    JobTitle: "Please enter Job Title",
                    Location: "Please enter Location",
                    ValidUntil: "Please enter ValidUntil",
                    Description: {
                        required: "Please enter Description",
                        minlength: "Description must consist of at least 100 characters"
                    },
                    SalaryFrom: {
                        number: "Salary is number. Other chars are not allowed",
                        minStrict: "Value can not be below 0"
                    },
                    SalaryTo: {
                        number: "Salary is number. Other chars are not allowed",
                        minStrict: "Value can not be below 0"

                    }
                },
                submitHandler: function (form, event) {
                    event.preventDefault();
                    onAddOffer($(this));
                }
            });
        });
    </script>

    <script>
        function startTime() {
            var today = new Date();
            var y = today.getFullYear();
            var M = checkTime(today.getMonth() + 1);
            var d = checkTime(today.getDate());
            var h = today.getHours();
            var m = today.getMinutes();
            var s = today.getSeconds();
            m = checkTime(m);
            s = checkTime(s);
            document.getElementById('clock').innerHTML =
                y + "-" + M + "-" + d + " " + h + ":" + m + ":" + s;
            var t = setTimeout(startTime, 500);
        }
        function checkTime(i) {
            if (i < 10) { i = "0" + i };  // add zero in front of numbers < 10
            return i;
        }


        startTime()

    </script>
}


